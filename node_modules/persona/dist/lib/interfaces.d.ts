import { CSSProperties } from 'react';
/**
 * @deprecated only used by `prefill` which is deprecated
 */
export declare type InquiryAttributes = {
    nameFirst?: string;
    nameLast?: string;
    birthdate?: string;
    addressStreet1?: string;
    addressStreet2?: string;
    addressCity?: string;
    addressSubdivision?: string;
    addressPostalCode?: string;
    countryCode?: string;
    phoneNumber?: string;
    emailAddress?: string;
    identificationNumber?: string;
};
export declare type Fields = {
    [fieldKey: string]: string | number | boolean | null | undefined | string[];
};
/**
 * Events sent from the persona-web iframe.
 *
 * https://docs.withpersona.com/docs/embedded-flow-event-handling
 */
export declare enum Event {
    Cancel = "exit",
    Complete = "complete",
    Error = "error",
    Fail = "fail",
    Load = "load",
    Ready = "ready",
    Start = "start",
    Success = "success",
    DocumentCameraSelect = "document-camera-select",
    DocumentCameraCapture = "document-camera-capture",
    DocumentUpload = "document-upload",
    OneTimeLinkSent = "one-time-link-sent",
    OneTimeLinkStart = "one-time-link-start",
    OneTimeLinkExit = "one-time-link-exit",
    SelfieCameraSelect = "selfie-camera-select",
    SelfieCameraCapture = "selfie-camera-capture",
    SelfieRecordUpload = "selfie-record-upload",
    LoadCameraFailed = "load-camera-failed",
    InquiryLoad = "inquiry-load",
    /**
     * @deprecated Persona will stop sending this event in the next major version
     */
    CountrySelect = "country-select",
    /**
     * @deprecated Persona will stop sending this event in the next major version
     */
    VerificationChange = "verification-change"
}
/**
 * Events sent from the persona-verify widget to persona-web.
 * @private
 */
export declare enum FromWidgetEvent {
    Open = "open",
    Exit = "exit",
    Destroy = "destroy"
}
/**
 * Parameters used when creating inquiries.
 *
 * https://docs.withpersona.com/docs/parameters
 */
export interface InquiryOptions {
    /**
     * Required when creating inquiries.
     * Takes both Template and InquiryTemplate IDs.
     * Passing the ID of an InquiryTemplate with no published versions will error.
     */
    templateId?: string;
    /**
     * Allows locking to a specific template version.
     */
    templateVersionId?: string;
    /**
     * Defaults to 'production'.
     */
    environment?: 'sandbox' | 'production';
    referenceId?: string;
    accountId?: string;
    language?: string;
    /**
     * Allows prepopulation of inquiry fields (and the Inquiry Flow UI).
     */
    fields?: Fields;
    /**
     * Allows using a specific theme.
     * @deprecated Inquiry Template styles are self-contained and will not use a
     * Theme object
     */
    themeId?: string;
    /**
     * Allows prepopulation of inquiry form inputs.
     * @deprecated will be replaced by `fields` in a future version. Old
     * Templates will need to continue using `prefill` instead of `fields`
     */
    prefill?: InquiryAttributes;
    /**
     * Allows prepopulation AND disabling of inquiry form inputs.
     * @deprecated the prepopulation part of this attribute will be replaced by
     * `fields`. The disabling part of this attribute will be replaced by Inquiry
     * Template step configuration.
     */
    lockedAttributes?: InquiryAttributes;
    /**
     * Required when resuming inquiries.
     */
    inquiryId?: string;
    /**
     * Required when resuming pending inquiries.
     */
    sessionToken?: string;
    /**
     * Called when the iframe loads the Persona Inquiry flow, but before the Inquiry flow is ready.
     * If `inquiryId` is undefined, no inquiry has been created yet.
     */
    onLoad?: () => void;
    /**
     * Called after the Inquiry flow is ready.
     * If `inquiryId` is undefined, no inquiry has been created yet.
     */
    onReady?: () => void;
    /**
     * Called when the inquiry flow is completed. Returns the inquiry status and all fields.
     */
    onComplete?: ({ inquiryId, status, fields, }: {
        inquiryId: string;
        status: string;
        fields: Fields;
    }) => void;
    /**
     * Called when the user exits the widget _before_ completion.
     * If `inquiryId` and `sessionToken` are undefined, it means no inquiry has been created yet.
     * Replaces `onExit()`.
     */
    onCancel?: ({ inquiryId, sessionToken }: {
        inquiryId?: string;
        sessionToken?: string;
    }) => void;
    /**
     * Catch-all handler.
     */
    onEvent?: (name: Event, metadata?: {
        [key: string]: unknown;
    }) => void;
    /**
     * Handles network errors, configuration errors, etc.
     */
    onError?: (error: InquiryError) => void;
    parent?: HTMLElement;
    /**
     * Allows specifying additional origins for CSP purposes. Values should
     * include both protocol and host (e.g. https://withpersona.com).
     *
     * This is REQUIRED when the page that embeds the Persona widget is itself
     * embedded in another page as an iframe. The value should be an array of
     * origins for ALL iframes that are ancestors of the Persona iframe.
     *
     * `window.target.origin` is provided by default.
     */
    frameAncestors?: string[];
    /**
     * Allows specifying a custom target for `window.postMessage` from the
     * Persona app, which defaults to the iframe origin.
     *
     * This is REQUIRED when the page that embeds the Persona widget is itself
     * embedded in another page as an iframe. The value should be the origin where
     * the Persona SDK is mounted.
     */
    messageTargetOrigin?: string;
    /**
     * Iframe height.
     */
    frameHeight?: CSSProperties['maxHeight'];
    /**
     * Iframe width. Max allowed width is 768px.
     */
    frameWidth?: CSSProperties['maxWidth'];
    /**
     * @private Internal property for testing. Will do nothing.
     * To use the 'development' option, your organization must include localhost
     * as an allowed-host.
     */
    host?: 'development' | 'staging' | 'production';
}
export declare enum BaseUrl {
    Development = "http://localhost:3000",
    Staging = "https://withpersona-staging.com",
    Production = "https://withpersona.com"
}
/**
 * Payload sent by Persona via `postMessage`.
 */
interface ServerMessageDataBase {
    containerId: string;
    templateId?: string;
    templateVersionId?: string;
    name: Event;
    metadata?: {
        [key: string]: unknown;
    };
    error?: InquiryError;
}
interface ServerMessageDataLoad extends ServerMessageDataBase {
    name: Event.Load;
    metadata?: never;
    error?: never;
}
interface ServerMessageDataReady extends ServerMessageDataBase {
    name: Event.Ready;
    metadata?: never;
    error?: never;
}
interface ServerMessageDataComplete extends ServerMessageDataBase {
    name: Event.Complete;
    metadata: {
        inquiryId: string;
        status: string;
        fields?: Fields;
        scopes: InquiryAttributes;
    };
    error?: never;
}
interface ServerMessageDataFail extends ServerMessageDataBase {
    name: Event.Fail;
    metadata: {
        inquiryId: string;
        status: string;
        fields?: Fields;
        scopes: InquiryAttributes;
    };
    error?: never;
}
interface ServerMessageDataCancel extends ServerMessageDataBase {
    name: Event.Cancel;
    metadata: {
        inquiryId?: string;
        sessionToken?: string;
    };
    error?: never;
}
interface ServerMessageDataError extends ServerMessageDataBase {
    name: Event.Error;
    metadata?: never;
    error: InquiryError;
}
export declare type ServerMessageData = ServerMessageDataLoad | ServerMessageDataReady | ServerMessageDataComplete | ServerMessageDataFail | ServerMessageDataCancel | ServerMessageDataError;
interface InquiryErrorBase {
    status: number;
    code: string;
    message?: string;
}
interface InquiryErrorApplication extends InquiryErrorBase {
    status: 0;
    code: 'application_error';
}
interface InquiryErrorInvalidConfig extends InquiryErrorBase {
    status: 400;
    code: 'invalid_config';
}
interface InquiryErrorInactiveTemplate extends InquiryErrorBase {
    status: 422;
    code: 'inactive_template';
}
/**
 * @deprecated not actually sent by Persona.
 */
interface InquiryErrorInvalidInquiryId extends InquiryErrorBase {
    status: 404;
    code: 'invalid_inquiry_id';
}
interface InquiryErrorUnauthenticated extends InquiryErrorBase {
    status: 409;
    code: 'unauthenticated';
}
interface InquiryErrorUnknown extends InquiryErrorBase {
    status: number;
    code: 'unknown';
}
export declare type InquiryError = InquiryErrorApplication | InquiryErrorInvalidConfig | InquiryErrorInactiveTemplate | InquiryErrorInvalidInquiryId | InquiryErrorUnauthenticated | InquiryErrorUnknown;
export {};
